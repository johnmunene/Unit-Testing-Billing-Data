#!/usr/bin/env python
# coding: utf-8

# In[3]:


# -*- coding: utf-8 -*-
"""Unit_Test_Assignment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fknjMjPp9WEj9LdNkCTm-BhUIuRVSsEa

Below is the starting code that includes the data pipeline functions. You should focus on writing unit tests for these functions using the unittest framework.
"""

import pandas as pd
import unittest

def data_extraction(file_path):
    data = pd.read_csv(file_path)
    return data

def data_transformation(data):
    data = data.drop_duplicates()
    data['billing_amount'] = data['billing_amount'].str.replace('$', '').astype(float)
    data['total_charges'] = data['billing_amount'] + data['tax_amount']
    return data

def data_loading(data, output_file):
    data.to_csv(output_file, index=False)

class TestDataPipeline(unittest.TestCase):
    def test_data_extraction(self):
        # Arrange
        csv_file_path = "E:\\Data_Engineering\\Unit_test\\billing_data.csv"

        # Act
        result = extract_data_from_csv(csv_file_path)

        # Assert
        expected =  [
         {'customer_id': '1', 'billing_amount': '100', 'tax_amount': '10'},
            {'customer_id': '2', 'billing_amount': '200', 'tax_amount': '20'},
            {'customer_id': '3', 'billing_amount': '300', 'tax_amount': '30'},
            {'customer_id': '4', 'billing_amount': '400', 'tax_amount': '40'},
            {'customer_id': '5', 'billing_amount': '500', 'tax_amount': '50'}


        ]  # Define the expected extracted data
        self.assertEqual(result, expected)

    def test_data_transformation(self):
         # Prepare test data
        data = data_extraction('billing_data.csv')

        expected_transformed_data = [
            {'customer_id': '1', 'billing_amount': '$100', 'tax_amount': '10', 'total_charges': '110'},
            {'customer_id': '2', 'billing_amount': '$200', 'tax_amount': '20', 'total_charges': '220'},
            {'customer_id': '3', 'billing_amount': '$300', 'tax_amount': '30', 'total_charges': '330'},
            {'customer_id': '4', 'billing_amount': '$400', 'tax_amount': '40', 'total_charges': '440'},
            {'customer_id': '5', 'billing_amount': '$500', 'tax_amount': '50', 'total_charges': '550'}
        ]

        # Execute the function under test
        transformed_data = transform_data(data)

        # Verify the transformed data
        self.assertEqual(transformed_data, expected_transformed_data)

    def test_data_loading(self):
        # Prepare test data
        data = data_transformation(data)
        expected_output_file = 'E:\\Data_Engineering\\Unit_test\\expected_data.csv'

        # Execute the function under test
        load_data_to_csv(data, self.output_file)

        # Verify the output CSV file
        with open(self.output_file, 'r') as output_file, open(expected_output_file, 'r') as expected_file:
            self.assertEqual(output_file.read(), expected_file.read())

if __name__ == '__main__':
    unittest.main()


# In[ ]:




